{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/utils/db.ts"],"sourcesContent":["import mongoose from \"mongoose\";\n\nconst connect = async () => {\n  if (mongoose.connections[0].readyState) return;\n\n  try {\n    await mongoose.connect('mongodb://localhost:27017/test', {});\n    console.log(\"Mongo Connection successfully established.\");\n  } catch (error) {\n    throw new Error(\"Error connecting to Mongoose\");\n  }\n};\n\nexport default connect;"],"names":[],"mappings":";;;;;;AAEA,MAAM,UAAU;IACd,IAAI,2CAAA,CAAA,UAAQ,CAAC,WAAW,CAAC,EAAE,CAAC,UAAU,EAAE;IAExC,IAAI;QACF,MAAM,2CAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,kCAAkC,CAAC;QAC1D,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,OAAO;QACd,MAAM,IAAI,MAAM;IAClB;AACF;uCAEe"}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 26, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/models/material.tsx"],"sourcesContent":["// models/Material.ts\r\n\r\nimport mongoose, { Schema, Document } from 'mongoose';\r\n\r\n// Define an interface representing the document properties\r\ninterface IMaterial extends Document {\r\n  email: string;\r\n  type: string;\r\n  models: string;\r\n  reference: string;\r\n  quantity: number;\r\n}\r\n\r\n// Define the schema\r\nconst MaterialSchema = new Schema({\r\n  email: { type: String, required: true },\r\n  type: { type: String, required: true },\r\n  models: { type: String, required: true },\r\n  reference: { type: String, required: true },\r\n  quantity: { type: Number, required: true }\r\n});\r\n\r\n// Define and export the model\r\n\r\nconst Material = mongoose.models.Material || mongoose.model<IMaterial>('Material', MaterialSchema);\r\nexport default Material;\r\n"],"names":[],"mappings":"AAAA,qBAAqB;;;;;;;AAarB,oBAAoB;AACpB,MAAM,iBAAiB,IAAI,2CAAA,CAAA,SAAM,CAAC;IAChC,OAAO;QAAE,MAAM;QAAQ,UAAU;IAAK;IACtC,MAAM;QAAE,MAAM;QAAQ,UAAU;IAAK;IACrC,QAAQ;QAAE,MAAM;QAAQ,UAAU;IAAK;IACvC,WAAW;QAAE,MAAM;QAAQ,UAAU;IAAK;IAC1C,UAAU;QAAE,MAAM;QAAQ,UAAU;IAAK;AAC3C;AAEA,8BAA8B;AAE9B,MAAM,WAAW,2CAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,QAAQ,IAAI,2CAAA,CAAA,UAAQ,CAAC,KAAK,CAAY,YAAY;uCACpE"}},
    {"offset": {"line": 59, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 64, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/api/materiallist/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport connect from '../../../utils/db';\r\nimport Post from '../../../models/material';\r\n\r\nexport const GET = async () => {\r\n  try {\r\n    // Connect to the database\r\n    await connect();\r\n\r\n    // Fetch all materials from the database\r\n    const materials = await Post.find();\r\n\r\n    return new NextResponse(JSON.stringify(materials), { status: 200 });\r\n  } catch (error) {\r\n    console.error('Erreur recuperation materiels:', error);\r\n    return new NextResponse(`Erreur recuperation materiels: ${error}`, { status: 500 });\r\n  }\r\n};\r\n"],"names":[],"mappings":";;;;;;;;;;AAIO,MAAM,MAAM;IACjB,IAAI;QACF,0BAA0B;QAC1B,MAAM,CAAA,GAAA,6GAAA,CAAA,UAAO,AAAD;QAEZ,wCAAwC;QACxC,MAAM,YAAY,MAAM,qHAAA,CAAA,UAAI,CAAC,IAAI;QAEjC,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,KAAK,SAAS,CAAC,YAAY;YAAE,QAAQ;QAAI;IACnE,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAAkC;QAChD,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,CAAC,+BAA+B,EAAE,MAAM,CAAC,EAAE;YAAE,QAAQ;QAAI;IACnF;AACF"}},
    {"offset": {"line": 90, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}