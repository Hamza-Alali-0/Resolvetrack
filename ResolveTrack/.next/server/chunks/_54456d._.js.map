{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/utils/db.ts"],"sourcesContent":["import mongoose from \"mongoose\";\n\nconst connect = async () => {\n  if (mongoose.connections[0].readyState) return;\n\n  try {\n    await mongoose.connect('mongodb://localhost:27017/test', {});\n    console.log(\"Mongo Connection successfully established.\");\n  } catch (error) {\n    throw new Error(\"Error connecting to Mongoose\");\n  }\n};\n\nexport default connect;"],"names":[],"mappings":";;;;;;AAEA,MAAM,UAAU;IACd,IAAI,2CAAA,CAAA,UAAQ,CAAC,WAAW,CAAC,EAAE,CAAC,UAAU,EAAE;IAExC,IAAI;QACF,MAAM,2CAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,kCAAkC,CAAC;QAC1D,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,OAAO;QACd,MAAM,IAAI,MAAM;IAClB;AACF;uCAEe"}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 26, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/models/User.ts"],"sourcesContent":["import mongoose from \"mongoose\";\n\nconst { Schema } = mongoose;\n\nconst userSchema = new Schema(\n  {\n    email: {\n      type: String,\n      unique: true,\n      required: true,\n    },\n    password: {\n      type: String,\n      required: false,\n    },\n  },\n  { timestamps: true }\n);\n\nexport default mongoose.models.User || mongoose.model(\"User\", userSchema);"],"names":[],"mappings":";;;;;;AAEA,MAAM,EAAE,MAAM,EAAE,GAAG,2CAAA,CAAA,UAAQ;AAE3B,MAAM,aAAa,IAAI,OACrB;IACE,OAAO;QACL,MAAM;QACN,QAAQ;QACR,UAAU;IACZ;IACA,UAAU;QACR,MAAM;QACN,UAAU;IACZ;AACF,GACA;IAAE,YAAY;AAAK;uCAGN,2CAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,2CAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ"}},
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/api/emails/route.ts"],"sourcesContent":["// app/api/display/route.ts\r\n\r\nimport { NextResponse } from 'next/server';\r\nimport connect from '../../../utils/db';\r\nimport Post from '../../../models/User';\r\n\r\nexport const GET = async () => {\r\n    try {\r\n        await connect(); // Assuming connect() establishes the database connection\r\n\r\n        const posts = await Post.find({ email: { $ne: 'admin@gmail.com' } }, { email: 1 }).lean(); // Excluding 'admin@gmail.com'\r\n\r\n        const emails = posts.map(post => post.email);\r\n        return new NextResponse(JSON.stringify(emails), { status: 200 });\r\n    } catch (error) {\r\n        return new NextResponse(`Erreur recuperation de lemail: ${error}`, { status: 500 });\r\n    }\r\n};\r\n"],"names":[],"mappings":"AAAA,2BAA2B;;;;;;;;;;;AAMpB,MAAM,MAAM;IACf,IAAI;QACA,MAAM,CAAA,GAAA,6GAAA,CAAA,UAAO,AAAD,KAAK,yDAAyD;QAE1E,MAAM,QAAQ,MAAM,gHAAA,CAAA,UAAI,CAAC,IAAI,CAAC;YAAE,OAAO;gBAAE,KAAK;YAAkB;QAAE,GAAG;YAAE,OAAO;QAAE,GAAG,IAAI,IAAI,8BAA8B;QAEzH,MAAM,SAAS,MAAM,GAAG,CAAC,CAAA,OAAQ,KAAK,KAAK;QAC3C,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,KAAK,SAAS,CAAC,SAAS;YAAE,QAAQ;QAAI;IAClE,EAAE,OAAO,OAAO;QACZ,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,CAAC,+BAA+B,EAAE,MAAM,CAAC,EAAE;YAAE,QAAQ;QAAI;IACrF;AACJ"}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}