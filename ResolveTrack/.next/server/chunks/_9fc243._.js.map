{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/utils/db.ts"],"sourcesContent":["import mongoose from \"mongoose\";\n\nconst connect = async () => {\n  if (mongoose.connections[0].readyState) return;\n\n  try {\n    await mongoose.connect('mongodb://localhost:27017/test', {});\n    console.log(\"Mongo Connection successfully established.\");\n  } catch (error) {\n    throw new Error(\"Error connecting to Mongoose\");\n  }\n};\n\nexport default connect;"],"names":[],"mappings":";;;;;;AAEA,MAAM,UAAU;IACd,IAAI,2CAAA,CAAA,UAAQ,CAAC,WAAW,CAAC,EAAE,CAAC,UAAU,EAAE;IAExC,IAAI;QACF,MAAM,2CAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,kCAAkC,CAAC;QAC1D,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,OAAO;QACd,MAAM,IAAI,MAAM;IAClB;AACF;uCAEe"}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 26, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/models/reclamations.tsx"],"sourcesContent":["// models/Reclamation.ts\r\nimport mongoose, { Schema, Document } from 'mongoose';\r\n\r\nexport interface IReclamation extends Document {\r\n  email: string;\r\n  type: string;\r\n  models: string;\r\n  reference: string;\r\n  message: string;\r\n  etat: string;\r\n  date: Date;\r\n  responseDate?: Date; \r\n  updateDate: Date;\r\n}\r\n\r\nconst ReclamationSchema: Schema = new Schema({\r\n  email: { type: String, required: true },\r\n  type: { type: String, required: true },\r\n  models: { type: String, required: true },\r\n  reference: { type: String, required: true },\r\n  message: { type: String, required: true },\r\n  etat: { type: String, default: 'en attente' },\r\n  date: { type: Date, default: Date.now },\r\n  responseDate: { type: Date }, \r\n  updateDate: { type: Date, default: null }, \r\n});\r\n\r\nexport default mongoose.models.Reclamation || mongoose.model<IReclamation>('Reclamation', ReclamationSchema);\r\n"],"names":[],"mappings":"AAAA,wBAAwB;;;;;;;AAexB,MAAM,oBAA4B,IAAI,2CAAA,CAAA,SAAM,CAAC;IAC3C,OAAO;QAAE,MAAM;QAAQ,UAAU;IAAK;IACtC,MAAM;QAAE,MAAM;QAAQ,UAAU;IAAK;IACrC,QAAQ;QAAE,MAAM;QAAQ,UAAU;IAAK;IACvC,WAAW;QAAE,MAAM;QAAQ,UAAU;IAAK;IAC1C,SAAS;QAAE,MAAM;QAAQ,UAAU;IAAK;IACxC,MAAM;QAAE,MAAM;QAAQ,SAAS;IAAa;IAC5C,MAAM;QAAE,MAAM;QAAM,SAAS,KAAK,GAAG;IAAC;IACtC,cAAc;QAAE,MAAM;IAAK;IAC3B,YAAY;QAAE,MAAM;QAAM,SAAS;IAAK;AAC1C;uCAEe,2CAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,WAAW,IAAI,2CAAA,CAAA,UAAQ,CAAC,KAAK,CAAe,eAAe"}},
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/api/statistics/route.ts"],"sourcesContent":["// app/api/reclamationsCount/route.ts\r\nimport { NextResponse } from 'next/server';\r\nimport connect from '../../../utils/db';\r\nimport Reclamation from '../../../models/reclamations';\r\n\r\nexport const GET = async () => {\r\n  try {\r\n    await connect(); // Assuming connect() establishes the database connection\r\n\r\n    // Count specific states\r\n    const problemeResoluCount = await Reclamation.countDocuments({ etat: 'probleme resolu' });\r\n    const problemeNonResoluCount = await Reclamation.countDocuments({ etat: 'probleme non resolu' });\r\n\r\n    // Total count\r\n    const totalCount = await Reclamation.countDocuments();\r\n\r\n    // Count for 'en attente' is calculated as total minus specific states counts\r\n    const etatEnAttenteCount = totalCount - problemeResoluCount - problemeNonResoluCount;\r\n\r\n    const counts = {\r\n      etatEnAttenteCount,\r\n      problemeNonResoluCount,\r\n      problemeResoluCount,\r\n    };\r\n\r\n    return new NextResponse(JSON.stringify(counts), { status: 200 });\r\n  } catch (error) {\r\n    return new NextResponse(`Error in fetching reclamation counts: ${error}`, { status: 500 });\r\n  }\r\n};\r\n"],"names":[],"mappings":"AAAA,qCAAqC;;;;;;;;;;;AAK9B,MAAM,MAAM;IACjB,IAAI;QACF,MAAM,CAAA,GAAA,6GAAA,CAAA,UAAO,AAAD,KAAK,yDAAyD;QAE1E,wBAAwB;QACxB,MAAM,sBAAsB,MAAM,yHAAA,CAAA,UAAW,CAAC,cAAc,CAAC;YAAE,MAAM;QAAkB;QACvF,MAAM,yBAAyB,MAAM,yHAAA,CAAA,UAAW,CAAC,cAAc,CAAC;YAAE,MAAM;QAAsB;QAE9F,cAAc;QACd,MAAM,aAAa,MAAM,yHAAA,CAAA,UAAW,CAAC,cAAc;QAEnD,6EAA6E;QAC7E,MAAM,qBAAqB,aAAa,sBAAsB;QAE9D,MAAM,SAAS;YACb;YACA;YACA;QACF;QAEA,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,KAAK,SAAS,CAAC,SAAS;YAAE,QAAQ;QAAI;IAChE,EAAE,OAAO,OAAO;QACd,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,CAAC,sCAAsC,EAAE,MAAM,CAAC,EAAE;YAAE,QAAQ;QAAI;IAC1F;AACF"}},
    {"offset": {"line": 115, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}