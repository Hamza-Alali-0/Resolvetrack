{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/utils/db.ts"],"sourcesContent":["import mongoose from \"mongoose\";\n\nconst connect = async () => {\n  if (mongoose.connections[0].readyState) return;\n\n  try {\n    await mongoose.connect('mongodb://localhost:27017/test', {});\n    console.log(\"Mongo Connection successfully established.\");\n  } catch (error) {\n    throw new Error(\"Error connecting to Mongoose\");\n  }\n};\n\nexport default connect;"],"names":[],"mappings":";;;;;;AAEA,MAAM,UAAU;IACd,IAAI,2CAAA,CAAA,UAAQ,CAAC,WAAW,CAAC,EAAE,CAAC,UAAU,EAAE;IAExC,IAAI;QACF,MAAM,2CAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,kCAAkC,CAAC;QAC1D,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,OAAO;QACd,MAAM,IAAI,MAAM;IAClB;AACF;uCAEe"}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 26, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/models/Post.tsx"],"sourcesContent":["// models/Post.ts\r\n\r\nimport mongoose, { Schema, Document } from 'mongoose';\r\n\r\nexport interface IPost extends Document {\r\n    email: string;\r\n    title: string;\r\n    fullname: string;\r\n    centre: string;\r\n    bureau: string;\r\n    // Add more fields as needed\r\n}\r\n\r\nconst PostSchema: Schema = new Schema({\r\n    email: { type: String, required: true },\r\n    title: { type: String, required: true },\r\n    fullname: { type: String, required: true },\r\n    centre: { type: String, required: true },\r\n    bureau: { type: String, required: true },\r\n    // Define other fields\r\n});\r\n\r\n// Ensure each post has a unique combination of centre and bureau\r\nPostSchema.index({ centre: 1, bureau: 1 }, { unique: true });\r\n\r\nconst Post = mongoose.models.Post || mongoose.model<IPost>('Post', PostSchema);\r\n\r\nexport default Post;\r\n"],"names":[],"mappings":"AAAA,iBAAiB;;;;;;;AAajB,MAAM,aAAqB,IAAI,2CAAA,CAAA,SAAM,CAAC;IAClC,OAAO;QAAE,MAAM;QAAQ,UAAU;IAAK;IACtC,OAAO;QAAE,MAAM;QAAQ,UAAU;IAAK;IACtC,UAAU;QAAE,MAAM;QAAQ,UAAU;IAAK;IACzC,QAAQ;QAAE,MAAM;QAAQ,UAAU;IAAK;IACvC,QAAQ;QAAE,MAAM;QAAQ,UAAU;IAAK;AAE3C;AAEA,iEAAiE;AACjE,WAAW,KAAK,CAAC;IAAE,QAAQ;IAAG,QAAQ;AAAE,GAAG;IAAE,QAAQ;AAAK;AAE1D,MAAM,OAAO,2CAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,2CAAA,CAAA,UAAQ,CAAC,KAAK,CAAQ,QAAQ;uCAEpD"}},
    {"offset": {"line": 64, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 69, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/api/emailt/route.ts"],"sourcesContent":["// app/api/display/route.ts\r\n\r\nimport { NextResponse } from 'next/server';\r\nimport connect from '../../../utils/db';\r\nimport Post from '../../../models/Post';\r\n\r\nexport const GET = async () => {\r\n    try {\r\n        await connect(); // Assuming connect() establishes the database connection\r\n\r\n        const posts = await Post.find({ email: { $ne: 'admin@gmail.com' } }, { email: 1 }).lean(); // Excluding 'admin@gmail.com'\r\n\r\n        const emails = posts.map(post => post.email);\r\n        return new NextResponse(JSON.stringify(emails), { status: 200 });\r\n    } catch (error) {\r\n        return new NextResponse(`Erreur recuperation de lemail: ${error}`, { status: 500 });\r\n    }\r\n};\r\n"],"names":[],"mappings":"AAAA,2BAA2B;;;;;;;;;;;AAMpB,MAAM,MAAM;IACf,IAAI;QACA,MAAM,CAAA,GAAA,6GAAA,CAAA,UAAO,AAAD,KAAK,yDAAyD;QAE1E,MAAM,QAAQ,MAAM,iHAAA,CAAA,UAAI,CAAC,IAAI,CAAC;YAAE,OAAO;gBAAE,KAAK;YAAkB;QAAE,GAAG;YAAE,OAAO;QAAE,GAAG,IAAI,IAAI,8BAA8B;QAEzH,MAAM,SAAS,MAAM,GAAG,CAAC,CAAA,OAAQ,KAAK,KAAK;QAC3C,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,KAAK,SAAS,CAAC,SAAS;YAAE,QAAQ;QAAI;IAClE,EAAE,OAAO,OAAO;QACZ,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,CAAC,+BAA+B,EAAE,MAAM,CAAC,EAAE;YAAE,QAAQ;QAAI;IACrF;AACJ"}},
    {"offset": {"line": 100, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}