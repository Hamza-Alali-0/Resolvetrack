{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/models/User.ts"],"sourcesContent":["import mongoose from \"mongoose\";\n\nconst { Schema } = mongoose;\n\nconst userSchema = new Schema(\n  {\n    email: {\n      type: String,\n      unique: true,\n      required: true,\n    },\n    password: {\n      type: String,\n      required: false,\n    },\n  },\n  { timestamps: true }\n);\n\nexport default mongoose.models.User || mongoose.model(\"User\", userSchema);"],"names":[],"mappings":";;;;;;AAEA,MAAM,EAAE,MAAM,EAAE,GAAG,2CAAA,CAAA,UAAQ;AAE3B,MAAM,aAAa,IAAI,OACrB;IACE,OAAO;QACL,MAAM;QACN,QAAQ;QACR,UAAU;IACZ;IACA,UAAU;QACR,MAAM;QACN,UAAU;IACZ;AACF,GACA;IAAE,YAAY;AAAK;uCAGN,2CAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,2CAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ"}},
    {"offset": {"line": 26, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/utils/db.ts"],"sourcesContent":["import mongoose from \"mongoose\";\n\nconst connect = async () => {\n  if (mongoose.connections[0].readyState) return;\n\n  try {\n    await mongoose.connect('mongodb://localhost:27017/test', {});\n    console.log(\"Mongo Connection successfully established.\");\n  } catch (error) {\n    throw new Error(\"Error connecting to Mongoose\");\n  }\n};\n\nexport default connect;"],"names":[],"mappings":";;;;;;AAEA,MAAM,UAAU;IACd,IAAI,2CAAA,CAAA,UAAQ,CAAC,WAAW,CAAC,EAAE,CAAC,UAAU,EAAE;IAExC,IAAI;QACF,MAAM,2CAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,kCAAkC,CAAC;QAC1D,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,OAAO;QACd,MAAM,IAAI,MAAM;IAClB;AACF;uCAEe"}},
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/api/auth/[...nextauth]/route.ts"],"sourcesContent":["import NextAuth, { NextAuthOptions, Account, User as NextAuthUser } from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport bcrypt from \"bcryptjs\";\nimport User from \"@/models/User\";\nimport connect from \"@/utils/db\";\nimport { JWT } from \"next-auth/jwt\";\n\ninterface Credentials {\n  email: string;\n  password: string;\n}\n\nexport const authOptions: NextAuthOptions = {\n  providers: [\n    CredentialsProvider({\n      id: \"credentials\",\n      name: \"Credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"text\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize(credentials: Credentials | undefined) {\n        if (!credentials) {\n          throw new Error(\"pas de credentials fournis\");\n        }\n\n        await connect();\n        try {\n          const user = await User.findOne({ email: credentials.email });\n          if (user && await bcrypt.compare(credentials.password, user.password)) {\n            return user as NextAuthUser;\n          }\n          throw new Error(\"email ou mot de passe incorrect\");\n        } catch (err: unknown) {\n          if (err instanceof Error) {\n            throw new Error(err.message);\n          }\n          throw new Error(\"erreur inconnue\");\n        }\n      },\n    }),\n  ],\n  callbacks: {\n    async signIn({ user, account }: { user: NextAuthUser; account: Account | null }) {\n      // Allow sign-in with credentials provider\n      return account?.provider === \"credentials\" ? true : false;\n    },\n    async session({ session, token }: { session: any; token: JWT }) {\n      // Attach user information to the session\n      if (token) {\n        session.user = token.user as NextAuthUser;\n      }\n      return session;\n    },\n    async jwt({ token, user }: { token: JWT; user?: NextAuthUser }) {\n      if (user) {\n        token.user = user;\n      }\n      return token;\n    },\n  },\n  session: {\n    strategy: \"jwt\",\n    maxAge: 30 * 24 * 60 * 60, // 30 days\n    updateAge: 24 * 60 * 60, // 24 hours\n  },\n  jwt: {\n    secret: process.env.NEXTAUTH_SECRET,\n    maxAge: 30 * 24 * 60 * 60, // 30 days\n  },\n  pages: {\n    signIn: \"/auth/signin\", // Custom sign-in page\n  },\n  debug: true, // Enable debug mode for detailed logs\n};\n\nexport const handler = NextAuth(authOptions);\nexport { handler as GET, handler as POST };\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAYO,MAAM,cAA+B;IAC1C,WAAW;QACT,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,IAAI;YACJ,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAO;gBACtC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAoC;gBAClD,IAAI,CAAC,aAAa;oBAChB,MAAM,IAAI,MAAM;gBAClB;gBAEA,MAAM,CAAA,GAAA,6GAAA,CAAA,UAAO,AAAD;gBACZ,IAAI;oBACF,MAAM,OAAO,MAAM,gHAAA,CAAA,UAAI,CAAC,OAAO,CAAC;wBAAE,OAAO,YAAY,KAAK;oBAAC;oBAC3D,IAAI,QAAQ,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,YAAY,QAAQ,EAAE,KAAK,QAAQ,GAAG;wBACrE,OAAO;oBACT;oBACA,MAAM,IAAI,MAAM;gBAClB,EAAE,OAAO,KAAc;oBACrB,IAAI,eAAe,OAAO;wBACxB,MAAM,IAAI,MAAM,IAAI,OAAO;oBAC7B;oBACA,MAAM,IAAI,MAAM;gBAClB;YACF;QACF;KACD;IACD,WAAW;QACT,MAAM,QAAO,EAAE,IAAI,EAAE,OAAO,EAAmD;YAC7E,0CAA0C;YAC1C,OAAO,SAAS,aAAa,gBAAgB,OAAO;QACtD;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAgC;YAC5D,yCAAyC;YACzC,IAAI,OAAO;gBACT,QAAQ,IAAI,GAAG,MAAM,IAAI;YAC3B;YACA,OAAO;QACT;QACA,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAuC;YAC5D,IAAI,MAAM;gBACR,MAAM,IAAI,GAAG;YACf;YACA,OAAO;QACT;IACF;IACA,SAAS;QACP,UAAU;QACV,QAAQ,KAAK,KAAK,KAAK;QACvB,WAAW,KAAK,KAAK;IACvB;IACA,KAAK;QACH,QAAQ,QAAQ,GAAG,CAAC,eAAe;QACnC,QAAQ,KAAK,KAAK,KAAK;IACzB;IACA,OAAO;QACL,QAAQ;IACV;IACA,OAAO;AACT;AAEO,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE"}},
    {"offset": {"line": 141, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}