{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/utils/db.ts"],"sourcesContent":["import mongoose from \"mongoose\";\n\nconst connect = async () => {\n  if (mongoose.connections[0].readyState) return;\n\n  try {\n    await mongoose.connect('mongodb://localhost:27017/test', {});\n    console.log(\"Mongo Connection successfully established.\");\n  } catch (error) {\n    throw new Error(\"Error connecting to Mongoose\");\n  }\n};\n\nexport default connect;"],"names":[],"mappings":";;;;;;AAEA,MAAM,UAAU;IACd,IAAI,2CAAA,CAAA,UAAQ,CAAC,WAAW,CAAC,EAAE,CAAC,UAAU,EAAE;IAExC,IAAI;QACF,MAAM,2CAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,kCAAkC,CAAC;QAC1D,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,OAAO;QACd,MAAM,IAAI,MAAM;IAClB;AACF;uCAEe"}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 26, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/models/reclamations.tsx"],"sourcesContent":["// models/Reclamation.ts\r\nimport mongoose, { Schema, Document } from 'mongoose';\r\n\r\nexport interface IReclamation extends Document {\r\n  email: string;\r\n  type: string;\r\n  models: string;\r\n  reference: string;\r\n  message: string;\r\n  etat: string;\r\n  date: Date;\r\n  responseDate?: Date; \r\n  updateDate: Date;\r\n}\r\n\r\nconst ReclamationSchema: Schema = new Schema({\r\n  email: { type: String, required: true },\r\n  type: { type: String, required: true },\r\n  models: { type: String, required: true },\r\n  reference: { type: String, required: true },\r\n  message: { type: String, required: true },\r\n  etat: { type: String, default: 'en attente' },\r\n  date: { type: Date, default: Date.now },\r\n  responseDate: { type: Date }, \r\n  updateDate: { type: Date, default: null }, \r\n});\r\n\r\nexport default mongoose.models.Reclamation || mongoose.model<IReclamation>('Reclamation', ReclamationSchema);\r\n"],"names":[],"mappings":"AAAA,wBAAwB;;;;;;;AAexB,MAAM,oBAA4B,IAAI,2CAAA,CAAA,SAAM,CAAC;IAC3C,OAAO;QAAE,MAAM;QAAQ,UAAU;IAAK;IACtC,MAAM;QAAE,MAAM;QAAQ,UAAU;IAAK;IACrC,QAAQ;QAAE,MAAM;QAAQ,UAAU;IAAK;IACvC,WAAW;QAAE,MAAM;QAAQ,UAAU;IAAK;IAC1C,SAAS;QAAE,MAAM;QAAQ,UAAU;IAAK;IACxC,MAAM;QAAE,MAAM;QAAQ,SAAS;IAAa;IAC5C,MAAM;QAAE,MAAM;QAAM,SAAS,KAAK,GAAG;IAAC;IACtC,cAAc;QAAE,MAAM;IAAK;IAC3B,YAAY;QAAE,MAAM;QAAM,SAAS;IAAK;AAC1C;uCAEe,2CAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,WAAW,IAAI,2CAAA,CAAA,UAAQ,CAAC,KAAK,CAAe,eAAe"}},
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/api/statisticsuser/route.ts"],"sourcesContent":["// app/api/statisticsuser/route.ts\r\nimport { NextResponse } from 'next/server';\r\nimport connect from '../../../utils/db';\r\nimport Reclamation from '../../../models/reclamations';\r\n\r\nexport const POST = async (request: Request) => {\r\n  try {\r\n    await connect(); // Establish database connection\r\n\r\n    const { email } = await request.json();\r\n    console.log(`Received email: ${email}`); // Log the email received\r\n\r\n    if (!email) {\r\n      return new NextResponse('User email is required', { status: 400 });\r\n    }\r\n\r\n    // Check if the email exists in the Reclamation database\r\n    const userExists = await Reclamation.findOne({ email: email });\r\n  \r\n\r\n    if (userExists) {\r\n      // Count specific states for the authenticated user\r\n      const problemeResoluCount = await Reclamation.countDocuments({ etat: 'probleme resolu', email: email });\r\n      const problemeNonResoluCount = await Reclamation.countDocuments({ etat: 'probleme non resolu', email: email });\r\n\r\n      // Total count for the user\r\n      const totalCount = await Reclamation.countDocuments({ email: email });\r\n      console.log(`Total Count: ${totalCount}`);\r\n\r\n      // Count for 'en attente' calculated as total minus specific states counts\r\n      const etatEnAttenteCount = totalCount - problemeResoluCount - problemeNonResoluCount;\r\n      \r\n\r\n      const counts = {\r\n        etatEnAttenteCount,\r\n        problemeNonResoluCount,\r\n        problemeResoluCount,\r\n      };\r\n\r\n      return new NextResponse(JSON.stringify(counts), { status: 200 });\r\n    } else {\r\n      return new NextResponse('Email not found in reclamations database', { status: 404 });\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error in fetching reclamation counts: ${error}`); // Log the error for debugging\r\n    return new NextResponse(`Error in fetching reclamation counts: ${error}`, { status: 500 });\r\n  }\r\n};\r\n"],"names":[],"mappings":"AAAA,kCAAkC;;;;;;;;;;;AAK3B,MAAM,OAAO,OAAO;IACzB,IAAI;QACF,MAAM,CAAA,GAAA,6GAAA,CAAA,UAAO,AAAD,KAAK,gCAAgC;QAEjD,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,QAAQ,IAAI;QACpC,QAAQ,GAAG,CAAC,CAAC,gBAAgB,EAAE,MAAM,CAAC,GAAG,yBAAyB;QAElE,IAAI,CAAC,OAAO;YACV,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,0BAA0B;gBAAE,QAAQ;YAAI;QAClE;QAEA,wDAAwD;QACxD,MAAM,aAAa,MAAM,yHAAA,CAAA,UAAW,CAAC,OAAO,CAAC;YAAE,OAAO;QAAM;QAG5D,IAAI,YAAY;YACd,mDAAmD;YACnD,MAAM,sBAAsB,MAAM,yHAAA,CAAA,UAAW,CAAC,cAAc,CAAC;gBAAE,MAAM;gBAAmB,OAAO;YAAM;YACrG,MAAM,yBAAyB,MAAM,yHAAA,CAAA,UAAW,CAAC,cAAc,CAAC;gBAAE,MAAM;gBAAuB,OAAO;YAAM;YAE5G,2BAA2B;YAC3B,MAAM,aAAa,MAAM,yHAAA,CAAA,UAAW,CAAC,cAAc,CAAC;gBAAE,OAAO;YAAM;YACnE,QAAQ,GAAG,CAAC,CAAC,aAAa,EAAE,WAAW,CAAC;YAExC,0EAA0E;YAC1E,MAAM,qBAAqB,aAAa,sBAAsB;YAG9D,MAAM,SAAS;gBACb;gBACA;gBACA;YACF;YAEA,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,KAAK,SAAS,CAAC,SAAS;gBAAE,QAAQ;YAAI;QAChE,OAAO;YACL,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,4CAA4C;gBAAE,QAAQ;YAAI;QACpF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,CAAC,sCAAsC,EAAE,MAAM,CAAC,GAAG,8BAA8B;QAC/F,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,CAAC,sCAAsC,EAAE,MAAM,CAAC,EAAE;YAAE,QAAQ;QAAI;IAC1F;AACF"}},
    {"offset": {"line": 138, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}