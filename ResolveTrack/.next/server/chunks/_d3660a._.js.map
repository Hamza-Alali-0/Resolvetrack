{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/utils/db.ts"],"sourcesContent":["import mongoose from \"mongoose\";\n\nconst connect = async () => {\n  if (mongoose.connections[0].readyState) return;\n\n  try {\n    await mongoose.connect('mongodb://localhost:27017/test', {});\n    console.log(\"Mongo Connection successfully established.\");\n  } catch (error) {\n    throw new Error(\"Error connecting to Mongoose\");\n  }\n};\n\nexport default connect;"],"names":[],"mappings":";;;;;;AAEA,MAAM,UAAU;IACd,IAAI,2CAAA,CAAA,UAAQ,CAAC,WAAW,CAAC,EAAE,CAAC,UAAU,EAAE;IAExC,IAAI;QACF,MAAM,2CAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,kCAAkC,CAAC;QAC1D,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,OAAO;QACd,MAAM,IAAI,MAAM;IAClB;AACF;uCAEe"}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 26, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/models/rating.tsx"],"sourcesContent":["import mongoose, { Schema, Document } from 'mongoose';\r\n\r\n// Define the Rating interface extending Document\r\nexport interface IRating extends Document {\r\n  email: string;\r\n  stars: number;\r\n  message: string;\r\n  id: string; // Unique identifier for the rating\r\n  date: Date;\r\n}\r\n\r\n// Create the Rating schema\r\nconst RatingSchema: Schema = new Schema({\r\n  email: { type: String, required: true },\r\n  stars: { type: Number, required: true, min: 1, max: 5 }, // Rating should be between 1 and 5 stars\r\n  message: { type: String, required: true },\r\n  id: { type: String, required: true, unique: true }, // Ensure id is unique\r\n  date: { type: Date, default: Date.now }, // Default to current date if not provided\r\n});\r\n\r\n// Create and export the Rating model\r\nexport default mongoose.models.Rating || mongoose.model<IRating>('Rating', RatingSchema);\r\n"],"names":[],"mappings":";;;;;;AAWA,2BAA2B;AAC3B,MAAM,eAAuB,IAAI,2CAAA,CAAA,SAAM,CAAC;IACtC,OAAO;QAAE,MAAM;QAAQ,UAAU;IAAK;IACtC,OAAO;QAAE,MAAM;QAAQ,UAAU;QAAM,KAAK;QAAG,KAAK;IAAE;IACtD,SAAS;QAAE,MAAM;QAAQ,UAAU;IAAK;IACxC,IAAI;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACjD,MAAM;QAAE,MAAM;QAAM,SAAS,KAAK,GAAG;IAAC;AACxC;uCAGe,2CAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,MAAM,IAAI,2CAAA,CAAA,UAAQ,CAAC,KAAK,CAAU,UAAU"}},
    {"offset": {"line": 59, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 64, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/api/testimonials/route.ts"],"sourcesContent":["// app/api/display/route.ts\r\n\r\nimport { NextResponse } from 'next/server';\r\nimport connect from '../../../utils/db';\r\nimport rating from '../../../models/rating';\r\n\r\nexport const GET = async () => {\r\n    try {\r\n        await connect(); // Assuming connect() establishes the database connection\r\n\r\n        const Rating = await rating.find(); // Fetch all posts from the database\r\n\r\n        return new NextResponse(JSON.stringify(Rating), { status: 200 });\r\n    } catch (error) {\r\n        return new NextResponse(`Error in fetching posts: ${error}`, { status: 500 });\r\n    }\r\n};\r\n"],"names":[],"mappings":"AAAA,2BAA2B;;;;;;;;;;;AAMpB,MAAM,MAAM;IACf,IAAI;QACA,MAAM,CAAA,GAAA,6GAAA,CAAA,UAAO,AAAD,KAAK,yDAAyD;QAE1E,MAAM,SAAS,MAAM,mHAAA,CAAA,UAAM,CAAC,IAAI,IAAI,oCAAoC;QAExE,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,KAAK,SAAS,CAAC,SAAS;YAAE,QAAQ;QAAI;IAClE,EAAE,OAAO,OAAO;QACZ,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,CAAC,yBAAyB,EAAE,MAAM,CAAC,EAAE;YAAE,QAAQ;QAAI;IAC/E;AACJ"}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}